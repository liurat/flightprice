name: Build Windows Executable

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install dependencies
      shell: pwsh
      run: |
        Write-Host "开始安装依赖..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        Write-Host "依赖安装完成"
        
    - name: Verify environment
      shell: pwsh
      run: |
        Write-Host "环境检查："
        Write-Host "Python版本："
        python --version
        Write-Host "PyInstaller版本："
        pyinstaller --version
        Write-Host "当前工作目录："
        pwd
        Write-Host "项目文件列表："
        Get-ChildItem -Recurse
        
    - name: Build executable
      shell: pwsh
      run: |
        Write-Host "开始构建可执行文件..."
        
        # 检查必要文件
        $requiredFiles = @("scheduler.py", "config.py", "scheduler_config.py")
        foreach ($file in $requiredFiles) {
            if (-not (Test-Path $file)) {
                Write-Error "错误：$file 文件不存在"
                exit 1
            }
        }
        
        # 执行PyInstaller
        $pyinstallerArgs = @(
            "--clean",
            "--noconfirm",
            "--name", "机票价格监控",
            "--add-data", "config.py;.",
            "--add-data", "scheduler_config.py;.",
            "--hidden-import", "schedule",
            "--hidden-import", "selenium",
            "--hidden-import", "pandas",
            "--hidden-import", "webdriver_manager",
            "--hidden-import", "logging",
            "--hidden-import", "json",
            "--hidden-import", "datetime",
            "--log-level", "DEBUG",
            "scheduler.py"
        )
        
        try {
            pyinstaller @pyinstallerArgs
            if ($LASTEXITCODE -ne 0) {
                throw "PyInstaller 构建失败，退出代码：$LASTEXITCODE"
            }
        }
        catch {
            Write-Error "构建过程出错：$_"
            exit 1
        }
        
        # 验证构建结果
        if (-not (Test-Path "dist\机票价格监控.exe")) {
            Write-Error "可执行文件生成失败"
            Write-Host "dist目录内容："
            Get-ChildItem -Path "dist" -Recurse
            exit 1
        }
        
        Write-Host "可执行文件构建完成"
        
    - name: Create release package
      shell: pwsh
      run: |
        Write-Host "开始创建发布包..."
        
        # 创建发布目录
        $releaseDir = "release"
        New-Item -ItemType Directory -Force -Path $releaseDir
        
        # 定义需要复制的文件
        $filesToCopy = @{
            "dist\机票价格监控.exe" = "机票价格监控.exe"
            "start_monitor.bat" = "start_monitor.bat"
            "README.md" = "README.md"
        }
        
        # 复制文件
        foreach ($file in $filesToCopy.GetEnumerator()) {
            if (Test-Path $file.Key) {
                Copy-Item -Path $file.Key -Destination "$releaseDir\$($file.Value)"
                Write-Host "已复制: $($file.Value)"
            } else {
                Write-Error "错误：$($file.Key) 文件不存在"
                exit 1
            }
        }
        
        Write-Host "发布包创建完成"
        
    - name: Verify release package
      shell: pwsh
      run: |
        Write-Host "验证发布包内容："
        Get-ChildItem -Path "release" -Recurse
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-executable
        path: release/
        if-no-files-found: error
        retention-days: 7 